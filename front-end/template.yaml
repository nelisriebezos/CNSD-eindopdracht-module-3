#file: noinspection YAMLSchemaValidation
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: frontend stack

Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Parameters:
  Stage:
    Type: String
    Default: development

Conditions:
  IsProductionStage: !Equals [!Ref Stage, production]

Resources:
  FrontEndS3Bucket: # {{{
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  # }}}

  FrontEndS3BucketParameter: # {{{
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Stage}/frontEnd/bucketName
      Type: String
      Value: !Ref FrontEndS3Bucket
  # }}}

  FrontEndS3Policy: # {{{
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontEndS3Bucket
      PolicyDocument:
        Id: PolicyForCloudFrontPrivateContent
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontEndS3Bucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFront}
  # }}}

  WebAppOriginAccessControl: # {{{
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${Stage}-front-end-origin-access-control"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  # }}}

  CloudFront: # {{{
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: "index.html"
        Comment: !Sub ${Stage}
        Aliases: !If [IsProductionStage, ["www.dragons.cloud-native-minor.it"], !Ref "AWS::NoValue"]
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:861259332787:certificate/44d5935d-16b5-4faf-bb0b-98b37a142d33
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          # Front-end S3 bucket
          - Id: !Sub ${Stage}-front-end
            DomainName: !GetAtt FrontEndS3Bucket.RegionalDomainName
            OriginAccessControlId: !GetAtt WebAppOriginAccessControl.Id
            S3OriginConfig: {}
          # Card api gateway
          - Id: !Sub ${Stage}-card-api
            DomainName:
              Fn::Join:
                - ''
                - - Fn::ImportValue: !Sub "card-service-${Stage}-api"
                  - !Sub ".execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: !Sub "/${Stage}"
          # Collection api gateway
          - Id: !Sub ${Stage}-collection-api
            DomainName:
              Fn::Join:
                - ''
                - - Fn::ImportValue: !Sub "collection-service-${Stage}-api"
                  - !Sub ".execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: !Sub "/${Stage}"
          # Deck api gateway
          - Id: !Sub ${Stage}-deck-api
            DomainName:
              Fn::Join:
                - ''
                - - Fn::ImportValue: !Sub "deck-service-${Stage}-api"
                  - !Sub ".execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: !Sub "/${Stage}"
          # User api gateway
          - Id: !Sub ${Stage}-user-api
            DomainName:
              Fn::Join:
                - ''
                - - Fn::ImportValue: !Sub "user-service-${Stage}-api"
                  - !Sub ".execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: !Sub "/${Stage}"
          # Wishlist api gateway
          - Id: !Sub ${Stage}-wishlist-api
            DomainName:
              Fn::Join:
                - ''
                - - Fn::ImportValue: !Sub "wishlist-service-${Stage}-api"
                  - !Sub ".execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: !Sub "/${Stage}"
        CacheBehaviors:
          # Card api gateway behavior
          - TargetOriginId: !Sub ${Stage}-card-api
            PathPattern: /api/cards*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          # Collection api gateway behavior
          - TargetOriginId: !Sub ${Stage}-collection-api
            PathPattern: /api/collections*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          # Deck api gateway behavior
          - TargetOriginId: !Sub ${Stage}-deck-api
            PathPattern: /api/decks*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          # User api gateway behavior
          - TargetOriginId: !Sub ${Stage}-user-api
            PathPattern: /api/users*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          # Wishlist api gateway behavior
          - TargetOriginId: !Sub ${Stage}-wishlist-api
            PathPattern: /api/wishlists*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
        DefaultCacheBehavior:
          TargetOriginId: !Sub ${Stage}-front-end
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
          CachedMethods: [GET, HEAD]
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
  # }}}

  CloudfrontParameter: # {{{
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Stage}/frontEnd/cloudFrontId
      Type: String
      Value: !Ref CloudFront
  # }}}

  CloudfrontUrlParameter: # {{{
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Stage}/frontEnd/cloudFrontUrl
      Type: String
      Value: !Sub "https://${CloudFront.DomainName}"
  # }}}

Outputs:
  FrontEndS3BucketDomainName:
    Description: Front-end S3 bucket domain name
    Value: !GetAtt FrontEndS3Bucket.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-FrontEndS3BucketDomainName
  CloudFrontId:
    Description: CloudFront distribution id
    Value: !Ref CloudFront
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontId
